{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { IonContent } from '@ionic/angular';\nimport { Storage } from '@capacitor/storage';\nimport { Browser } from '@capacitor/browser';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../api.service\";\nimport * as i4 from \"@angular/common\";\n\nfunction HomePage_ion_item_28_ion_buttons_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-buttons\", 19);\n    i0.ɵɵelementStart(1, \"ion-button\", 6);\n    i0.ɵɵlistener(\"click\", function HomePage_ion_item_28_ion_buttons_12_Template_ion_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return ctx_r3.updateUserMenu();\n    });\n    i0.ɵɵelement(2, \"ion-icon\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HomePage_ion_item_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\");\n    i0.ɵɵelementStart(1, \"ion-avatar\", 13);\n    i0.ɵɵelement(2, \"img\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-label\");\n    i0.ɵɵelementStart(4, \"h3\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"h4\", 15);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"h4\", 16);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"h4\", 17);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, HomePage_ion_item_28_ion_buttons_12_Template, 3, 0, \"ion-buttons\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(item_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r1.menu);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r1.cnt + \"\\uAC1C\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r1.price.toLocaleString(\"ko-KR\") + \"\\uC6D0\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r1.name === ctx_r0.userName);\n  }\n}\n\nexport let HomePage = /*#__PURE__*/(() => {\n  class HomePage {\n    constructor(router, alertCtrl, toastCtrl, api, platform, _zone) {\n      this.router = router;\n      this.alertCtrl = alertCtrl;\n      this.toastCtrl = toastCtrl;\n      this.api = api;\n      this.platform = platform;\n      this._zone = _zone;\n      this.scrolling = false;\n      this.menuList = [];\n      this.resetEveryValue();\n      this.setToday();\n      this.setUserName();\n      this.getMenuList();\n      this.getMenuInfo();\n    }\n\n    getValue(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield Storage.get({\n          key: key\n        });\n      });\n    }\n\n    getLocal(key) {\n      this.getValue(key).then(data => {\n        data.value && (this[key] = data.value);\n      });\n    } // api를 조회해보고 값이 없으면 today가 바뀐 것이므로 값들을 reset 해준다.\n\n\n    resetEveryValue() {\n      this.api.getApi('badal', this.today).subscribe(success => {\n        if (success == '') {\n          this.infoId = '';\n          removeValue('infoId');\n          this.userId = '';\n          removeValue('userId');\n          this.url = '';\n          removeValue('url');\n          this.menu = '';\n          removeValue('menu');\n          this.state = '';\n          removeValue('state');\n          this.userMenu = '';\n          removeValue('userMenu');\n          this.count = null;\n          removeValue('count');\n          this.price = null;\n          removeValue('price');\n        }\n\n        ;\n      }, err => {\n        console.log(JSON.stringify(err));\n      });\n      this.api.getApi('menu', this.today).subscribe(success => {\n        if (success == '') {\n          this.infoId = '';\n          removeValue('infoId');\n          this.userId = '';\n          removeValue('userId');\n          this.url = '';\n          removeValue('url');\n          this.menu = '';\n          removeValue('menu');\n          this.state = '';\n          removeValue('state');\n          this.userMenu = '';\n          removeValue('userMenu');\n          this.count = null;\n          removeValue('count');\n          this.price = null;\n          removeValue('price');\n        }\n\n        ;\n      }, err => {\n        console.log(JSON.stringify(err));\n      });\n    } // 오늘 날짜를 string 형태로 today에 저장해준다.\n\n\n    setToday() {\n      const newDate = new Date();\n      const year = newDate.getFullYear();\n      const month = ('0' + (newDate.getMonth() + 1)).slice(-2);\n      const date = ('0' + newDate.getDate()).slice(-2);\n      const hour = newDate.getHours(); // 점심과 저녁을 맨 앞 1자리의 알파벳으로 구분한다.\n\n      if (hour < 16) {\n        this.today = 'L' + year + month + date;\n      } else {\n        this.today = 'D' + year + month + date;\n      }\n    } // local storage에서 userName을 불러와 저장해준다. (메뉴를 입력할 때 menuList에 저장하기 위함 -> 사용자마다 한 번만 실행해주면 충분)\n\n\n    setUserName() {\n      this.getValue('userName').then(data => {\n        this.userName = data.value;\n      });\n    } // getApi를 사용하여 값을 받아오고 나서 값이 local storage에 저장이 안돼서 다시 한 번 저장해준다.\n\n\n    setInfoValue() {\n      this.getLocal('infoId');\n      this.getLocal('url');\n      this.getLocal('state'); //     this.getValue('state').then((data: any) => {\n      //       data.value && (this.state = data.value);\n      //     });\n    }\n\n    setListValue() {\n      this.getValue('userId').then(data => {\n        data.value ? this.userId = data.value : this.userId = '';\n      });\n      this.getValue('userMenu').then(data => {\n        data.value ? this.userMenu = data.value : this.userMenu = '';\n      });\n      this.getValue('count').then(data => {\n        data.value ? this.count = data.value : this.count = null;\n      });\n      this.getValue('price').then(data => {\n        data.value ? this.price = data.value : this.price = null;\n      });\n    } // badal에서 url, menu, etc를 가져온다.\n\n\n    getMenuInfo() {\n      this.api.getApi('badal', this.today).subscribe(success => {\n        if (success == '') {\n          this.infoId = '';\n          setValue('infoId', this.infoId);\n          return false;\n        } //         this.infoId = success[0].id;\n\n\n        setValue('infoId', success[0].id);\n        setValue('url', success[0].url);\n        setValue('menu', success[0].menu);\n        setValue('state', success[0].etc);\n      }, err => {\n        console.log(JSON.stringify(err));\n      });\n      this.setInfoValue();\n    } // menu에서 각 행을 가져와 menuList 배열에 저장한다.\n\n\n    getMenuList() {\n      this.api.getApi('menu', this.today).subscribe(success => {\n        if (success == '') return false;\n        this.menuList = JSON.parse(JSON.stringify(success));\n        this.menuList.forEach(item => {\n          if (item.name === this.userName) {\n            this.userId = item.id;\n            setValue('userId', this.userId);\n            this.userMenu = item.menu;\n            setValue('userMenu', this.userMenu);\n            this.count = item.cnt;\n            setValue('count', this.count);\n            this.price = item.price;\n            setValue('price', this.price);\n          }\n        });\n      }, err => {\n        console.log(JSON.stringify(err));\n      });\n      this.setListValue();\n    } // menu에 입력된 userMenu, count, price를 저장한다.\n\n\n    postMenuList() {\n      this.api.postApi('menu', {\n        \"day\": this.today,\n        \"name\": this.userName,\n        \"menu\": this.userMenu,\n        \"cnt\": this.count,\n        \"price\": this.price\n      }).subscribe(success => {\n        console.log(JSON.stringify(success));\n      }, err => {\n        console.log(JSON.stringify(err));\n      });\n      this.getMenuList();\n    } // badal에서 변경된 url, menu, state(etc)를 저장한다. -> 이것만 써서 menuInfo를 변경하기 때문에 postMenuInfo는 불필요해짐\n\n\n    putMenuInfo() {\n      // 오늘의 menuInfo가 아직 없다면 postApi를 실행하고, 있다면 putApi를 실행한다.\n      if (!this.infoId) {\n        this.api.postApi('badal', {\n          \"day\": this.today,\n          \"grp\": \"sky\",\n          \"name\": this.userName,\n          \"url\": this.url,\n          \"menu\": this.menu,\n          \"etc\": this.state\n        }).subscribe(success => {\n          console.log(JSON.stringify(success));\n        }, err => {\n          console.log(JSON.stringify(err));\n        });\n      } else {\n        this.api.putApi('badal', this.infoId, {\n          \"name\": this.userName,\n          \"url\": this.url,\n          \"menu\": this.menu,\n          \"etc\": this.state\n        }).subscribe(success => {\n          console.log(JSON.stringify(success));\n        }, err => {\n          console.log(JSON.stringify(err));\n        });\n      }\n\n      this.getMenuInfo();\n    } // menu에서 변경된 userMenu, count, price를 저장한다.\n\n\n    putMenuList() {\n      this.api.putApi('menu', this.userId, {\n        \"menu\": this.userMenu,\n        \"cnt\": this.count,\n        \"price\": this.price\n      }).subscribe(success => {\n        console.log(JSON.stringify(success));\n      }, err => {\n        console.log(JSON.stringify(err));\n      });\n      this.getMenuList();\n    } // 해당 페이지로 라우팅시킨다.\n\n\n    goResult() {\n      this.router.navigate(['/result']);\n    }\n\n    goLogin() {\n      this.router.navigate(['/login']);\n    } // 입력된 url의 페이지로 이동하도록 한다. url이 입력되지 않았다면 alert를 띄운다.\n\n\n    goLink() {\n      this.url ? Browser.open({\n        url: this.url\n      }) : alert('아직 링크가 입력되지 않았네요.');\n    } // input의 입력값이 변경되면 userMenu의 값을 업데이트한다.\n\n\n    onChange(event) {\n      //     if (this.userId) {\n      //       event.target.value = '';\n      //       return false;\n      //     }\n      this.userMenu = event.target.value;\n    } // 버튼을 직접 누르지 않아도 enter 키를 통해 입력을 완료할 수 있도록 한다.\n\n\n    onKeyUp(event) {\n      if (event.keyCode === 13) {\n        this.createUserMenu();\n      }\n    } // 새로고침을 했을 때 다른 곳에서 변경되었을 가능성이 있는 데이터들을 다시 불러온다.\n\n\n    onRefresh(event) {\n      this.pageReload();\n      setTimeout(() => {\n        event.target.complete();\n      }, 500);\n    }\n\n    scrollStart() {\n      this._zone.run(() => {\n        this.scrolling = true;\n      });\n    }\n\n    scrollEnd() {\n      this._zone.run(() => {\n        this.scrolling = false;\n      });\n    }\n\n    scrollDown() {\n      let that = this;\n      setTimeout(() => {\n        that.content.scrollToBottom(0);\n      }, 500);\n    }\n\n    pageReload() {\n      this.getMenuInfo();\n      this.getMenuList();\n      location.reload();\n    } // hammer icon -> menu 설정 팝업\n\n\n    updateMenuInfo() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.state === ('선택완료' || '주문완료')) {\n          this.noticeToast(`${this.state} 상태예요.`);\n          return false;\n        }\n\n        const alert = yield this.alertCtrl.create({\n          cssClass: 'updateMenuInfo',\n          header: '오늘의 메뉴 설정하기',\n          subHeader: '메뉴는 되도록 간단하게 입력해주세요.',\n          inputs: [{\n            id: 'url',\n            name: 'url',\n            value: this.url,\n            placeholder: '링크를 입력해주세요.'\n          }, {\n            id: 'menu',\n            name: 'menu',\n            type: 'text',\n            value: this.menu,\n            placeholder: '상단에 표시할 메뉴를 입력해주세요.'\n          }],\n          buttons: [{\n            text: '취소하기',\n            cssClass: 'cancel',\n            handler: () => {}\n          }, {\n            text: '확인하기',\n            cssClass: 'confirm',\n            handler: data => {\n              if (!data.url) {\n                this.noticeToast('링크를 입력해주세요.');\n                return false;\n              }\n\n              if (!data.menu) {\n                this.noticeToast('상단에 표시할 메뉴를 입력해주세요.');\n                return false;\n              }\n\n              this.url = data.url;\n              setValue('url', this.url);\n              this.menu = data.menu;\n              setValue('menu', this.menu);\n              this.state = '선택중';\n              setValue('state', this.state);\n              this.putMenuInfo();\n              this.pageReload();\n            }\n          }]\n        });\n        yield alert.present().then(result => {\n          document.getElementById('menu').setAttribute('maxLength', '10');\n        });\n      });\n    } // paper-plane icon -> userMenu 입력 팝업\n\n\n    createUserMenu() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.state === '') {\n          this.noticeToast('화면 상단에서 메뉴를 설정해주세요.');\n          return false;\n        }\n\n        if (this.state === ('선택완료' || '주문완료')) {\n          this.noticeToast(`${this.state} 상태예요.`);\n          return false;\n        }\n\n        if (this.userId) {\n          this.noticeToast('이미 메뉴를 선택하셨어요.');\n          return false;\n        }\n\n        if (!this.userMenu) {\n          this.noticeToast('주문할 메뉴를 입력해주세요.');\n          return false;\n        }\n\n        const alert = yield this.alertCtrl.create({\n          cssClass: 'createUserMenu',\n          header: '내 메뉴 입력하기',\n          subHeader: '1인분이라면 수량은 생략하셔도 좋아요.',\n          inputs: [{\n            id: 'count',\n            name: 'count',\n            type: 'number',\n            placeholder: '수량을 입력해주세요.'\n          }, {\n            id: 'price',\n            name: 'price',\n            type: 'number',\n            placeholder: '가격을 입력해주세요.'\n          }],\n          buttons: [{\n            text: '취소하기',\n            cssClass: 'cancel',\n            handler: () => {}\n          }, {\n            text: '확인하기',\n            cssClass: 'confirm',\n            handler: data => {\n              if (!data.count) {\n                this.count = 1;\n              } else {\n                this.count = data.count;\n              }\n\n              setValue('count', this.count);\n\n              if (!data.price) {\n                this.noticeToast('가격을 입력해주세요.');\n                return false;\n              } else {\n                this.price = data.price;\n                setValue('price', this.price);\n              }\n\n              this.postMenuList();\n              this.pageReload();\n              this.scrollDown();\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    } // pencil icon -> userMenu 변경 팝업\n\n\n    updateUserMenu() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.state === ('선택완료' || '주문완료')) {\n          this.noticeToast(`${this.state} 상태예요!`);\n          return false;\n        }\n\n        const alert = yield this.alertCtrl.create({\n          cssClass: 'updateUserMenu',\n          header: '내 메뉴 변경하기',\n          subHeader: '변경할 메뉴의 정보를 입력해주세요.',\n          inputs: [{\n            id: 'userMenu',\n            name: 'userMenu',\n            type: 'text',\n            value: this.userMenu,\n            placeholder: '메뉴명을 입력해주세요.'\n          }, {\n            id: 'count',\n            name: 'count',\n            type: 'number',\n            value: this.count,\n            placeholder: '수량을 입력해주세요.'\n          }, {\n            id: 'price',\n            name: 'price',\n            type: 'number',\n            value: this.price,\n            placeholder: '가격을 입력해주세요.'\n          }],\n          buttons: [{\n            text: '취소하기',\n            cssClass: 'cancel',\n            handler: () => {}\n          }, {\n            text: '확인하기',\n            cssClass: 'confirm',\n            handler: data => {\n              if (!data.userMenu) {\n                this.noticeToast('메뉴명을 입력해주세요.');\n                return false;\n              } else {\n                this.userMenu = data.userMenu;\n                setValue('userMenu', this.userMenu);\n              }\n\n              if (!data.count) {\n                this.count = 1;\n              } else {\n                this.count = data.count;\n                setValue('count', this.count);\n              }\n\n              if (!data.price) {\n                this.noticeToast('가격을 입력해주세요.');\n                return false;\n              } else {\n                this.price = data.price;\n                setValue('price', this.price);\n              }\n\n              this.putMenuList();\n              this.pageReload();\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    }\n\n    noticeToast(msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastCtrl.create({\n          mode: 'md',\n          message: msg,\n          duration: 1000,\n          cssClass: 'toast'\n        });\n        yield toast.present();\n      });\n    }\n\n  }\n\n  HomePage.ɵfac = function HomePage_Factory(t) {\n    return new (t || HomePage)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AlertController), i0.ɵɵdirectiveInject(i2.ToastController), i0.ɵɵdirectiveInject(i3.ApiService), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  HomePage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomePage,\n    selectors: [[\"app-home\"]],\n    viewQuery: function HomePage_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(IonContent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    decls: 37,\n    vars: 6,\n    consts: [[3, \"fullscreen\", \"ngClass\"], [\"slot\", \"fixed\", 2, \"margin-top\", \"1.5rem\", 3, \"ionRefresh\"], [\"id\", \"header1\"], [\"color\", \"secondary\"], [\"color\", \"primary\"], [\"id\", \"header2\"], [3, \"click\"], [\"name\", \"restaurant\"], [\"name\", \"hammer\"], [\"name\", \"receipt\"], [4, \"ngFor\", \"ngForOf\"], [\"clearInput\", \"\", \"placeholder\", \"\\uC8FC\\uBB38\\uD560 \\uBA54\\uB274\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\", 3, \"ionChange\", \"keyup\"], [\"name\", \"paper-plane\"], [\"slot\", \"start\"], [\"src\", \"./assets/icon/avatar.png\"], [1, \"menu\"], [1, \"cnt\"], [1, \"price\"], [\"id\", \"userOnly\", 4, \"ngIf\"], [\"id\", \"userOnly\"], [\"name\", \"pencil\"]],\n    template: function HomePage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-content\", 0);\n        i0.ɵɵelementStart(1, \"ion-refresher\", 1);\n        i0.ɵɵlistener(\"ionRefresh\", function HomePage_Template_ion_refresher_ionRefresh_1_listener($event) {\n          return ctx.onRefresh($event);\n        });\n        i0.ɵɵelement(2, \"ion-refresher-content\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"ion-card\");\n        i0.ɵɵelementStart(4, \"ion-list\");\n        i0.ɵɵelementStart(5, \"ion-list-header\", 2);\n        i0.ɵɵelementStart(6, \"h2\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"ion-chip\", 3);\n        i0.ɵɵelementStart(9, \"ion-label\");\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"ion-chip\", 4);\n        i0.ɵɵelementStart(12, \"ion-label\");\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-list-header\", 5);\n        i0.ɵɵelementStart(15, \"ion-buttons\");\n        i0.ɵɵelementStart(16, \"ion-button\", 6);\n        i0.ɵɵlistener(\"click\", function HomePage_Template_ion_button_click_16_listener() {\n          return ctx.goLink();\n        });\n        i0.ɵɵelementStart(17, \"ion-label\");\n        i0.ɵɵtext(18, \"\\uC74C\\uC2DD\\uC810\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"ion-icon\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"ion-button\", 6);\n        i0.ɵɵlistener(\"click\", function HomePage_Template_ion_button_click_20_listener() {\n          return ctx.updateMenuInfo();\n        });\n        i0.ɵɵelementStart(21, \"ion-label\");\n        i0.ɵɵtext(22, \"\\uBA54\\uB274 \\uC124\\uC815\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"ion-icon\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"ion-button\", 6);\n        i0.ɵɵlistener(\"click\", function HomePage_Template_ion_button_click_24_listener() {\n          return ctx.goResult();\n        });\n        i0.ɵɵelementStart(25, \"ion-label\");\n        i0.ɵɵtext(26, \"\\uC8FC\\uBB38\\uC11C\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"ion-icon\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(28, HomePage_ion_item_28_Template, 13, 5, \"ion-item\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"ion-text\");\n        i0.ɵɵtext(30, \"\\uD654\\uBA74\\uC744 \\uC544\\uB798\\uB85C \\uB2F9\\uACA8 \\uBAA9\\uB85D\\uC744 \\uC0C8\\uB85C\\uACE0\\uCE68 \\uD574\\uBCF4\\uC138\\uC694!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"ion-footer\");\n        i0.ɵɵelementStart(32, \"ion-item\");\n        i0.ɵɵelementStart(33, \"ion-input\", 11);\n        i0.ɵɵlistener(\"ionChange\", function HomePage_Template_ion_input_ionChange_33_listener($event) {\n          return ctx.onChange($event);\n        })(\"keyup\", function HomePage_Template_ion_input_keyup_33_listener($event) {\n          return ctx.onKeyUp($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"ion-buttons\");\n        i0.ɵɵelementStart(35, \"ion-button\", 6);\n        i0.ɵɵlistener(\"click\", function HomePage_Template_ion_button_click_35_listener() {\n          return ctx.createUserMenu();\n        });\n        i0.ɵɵelement(36, \"ion-icon\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"fullscreen\", true)(\"ngClass\", ctx.scrolling ? \"scroll_view\" : \"\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate1(\"\\uC624\\uB298\\uC758 \", ctx.today.slice(0, 1) == \"L\" ? \"\\uC810\\uC2EC\" : \"\\uC800\\uB141\", \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.menu ? ctx.menu : \"---\", \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.state ? ctx.state : \"---\", \" \");\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"ngForOf\", ctx.menuList);\n      }\n    },\n    directives: [i2.IonContent, i4.NgClass, i2.IonRefresher, i2.IonRefresherContent, i2.IonCard, i2.IonList, i2.IonListHeader, i2.IonChip, i2.IonLabel, i2.IonButtons, i2.IonButton, i2.IonIcon, i4.NgForOf, i2.IonText, i2.IonFooter, i2.IonItem, i2.IonInput, i2.TextValueAccessor, i2.IonAvatar, i4.NgIf],\n    styles: [\"h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%]{font-weight:700}h2[_ngcontent-%COMP%]{font-size:1.5rem;margin-right:3vw}h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%]{font-size:.9rem}h4[_ngcontent-%COMP%]{margin-top:.4rem;padding-right:.2rem;display:inline-block}ion-content[_ngcontent-%COMP%]{--ion-background-color:#dae0e9}ion-card[_ngcontent-%COMP%]{min-height:90vh;margin:3.7vw 3.7vw 10vh;padding-bottom:2vh;border-radius:.9rem;overflow:hidden;--ion-background-color:#fff;text-align:center}ion-card[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]{margin:2.2vmin}ion-card[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-avatar[_ngcontent-%COMP%]{width:10vmin;height:10vmin}ion-list[_ngcontent-%COMP%]{padding:2.3vmin}ion-label[_ngcontent-%COMP%]{margin:0;padding:0}ion-chip[_ngcontent-%COMP%]{height:1.5rem;margin-top:1rem;margin-left:.5rem}ion-chip[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%]{font-size:.8rem}ion-button[_ngcontent-%COMP%]{color:#002f67}ion-button[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{font-size:1.5rem}ion-text[_ngcontent-%COMP%]{font-size:.6rem}ion-footer[_ngcontent-%COMP%]{position:fixed;bottom:0}ion-footer[_ngcontent-%COMP%]   ion-input[_ngcontent-%COMP%]{font-size:1rem}#header1[_ngcontent-%COMP%]{height:5vh;margin-top:1.5vh;margin-left:2.5vw}#header2[_ngcontent-%COMP%]{margin-left:1.5vw;margin-top:1vmin}#header2[_ngcontent-%COMP%]   ion-button[_ngcontent-%COMP%]{height:7vmin;padding:0 1.5vmin;margin-right:2vmin;border:.25vmin solid #768dab;border-radius:.5rem}#header2[_ngcontent-%COMP%]   ion-button[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%]{font-size:.78rem}#header2[_ngcontent-%COMP%]   ion-button[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{font-size:.88rem;padding:1vmin}#header2[_ngcontent-%COMP%]   ion-button[_ngcontent-%COMP%]:active{background-color:#e6eaef}.menu[_ngcontent-%COMP%]{width:25vw}.cnt[_ngcontent-%COMP%]{width:10vw;text-align:center}.price[_ngcontent-%COMP%]{width:16vw;text-align:right}#userOnly[_ngcontent-%COMP%]{position:relative;top:.5rem;right:.2rem}#userOnly[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{font-size:1rem}.scroll_view[_ngcontent-%COMP%]   .scroll-content[_ngcontent-%COMP%]{overflow-y:overlay}.scroll_view[_ngcontent-%COMP%]   .scroll-content[_ngcontent-%COMP%]::-webkit-scrollbar{-webkit-appearance:none}.scroll_view[_ngcontent-%COMP%]   .scroll-content[_ngcontent-%COMP%]::-webkit-scrollbar:vertical{width:3px}.scroll_view[_ngcontent-%COMP%]   .scroll-content[_ngcontent-%COMP%]::-webkit-scrollbar:horizontal{height:3px}.scroll_view[_ngcontent-%COMP%]   .scroll-content[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{border-radius:8px;background-color:#00000080}\"]\n  });\n  return HomePage;\n})();\n\nconst setValue = (key, value) => __awaiter(void 0, void 0, void 0, function* () {\n  yield Storage.set({\n    key: key,\n    value: value\n  });\n});\n\nconst removeValue = key => __awaiter(void 0, void 0, void 0, function* () {\n  yield Storage.remove({\n    key: key\n  });\n});","map":null,"metadata":{},"sourceType":"module"}