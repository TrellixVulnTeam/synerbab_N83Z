{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.group = 'CapacitorStorage';\n  }\n\n  async configure({\n    group\n  }) {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n\n  async get(options) {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n    return {\n      value\n    };\n  }\n\n  async set(options) {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n\n  async remove(options) {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n\n  async keys() {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n    return {\n      keys\n    };\n  }\n\n  async clear() {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n\n  async migrate() {\n    var _a;\n\n    const migrated = [];\n    const existing = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n      const {\n        value: currentValue\n      } = await this.get({\n        key\n      });\n\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({\n          key,\n          value\n        });\n        migrated.push(key);\n      }\n    }\n\n    return {\n      migrated,\n      existing\n    };\n  }\n\n  async removeOld() {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n\n  get impl() {\n    return window.localStorage;\n  }\n\n  get prefix() {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n\n  rawKeys() {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n\n  applyPrefix(key) {\n    return this.prefix + key;\n  }\n\n} //# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module"}